# -*- coding: utf-8 -*-

from core.ellipticcurve import EllipticCurve


class DiffieHellman(EllipticCurve):

    def __init__(self):
        super(DiffieHellman, self).__init__()
        self.secret_key = None

    def getParameterToSend(self):
        """
        :return: Diffie Hellman parameter (which is in fact the public key generated by the EllipticCurve class) to be
        sent over the network
        """
        return self.public_key

    def completeDiffieHellmanExchange(self, dh_param):
        """
        Completes the DH exchange and calculate the secret key thanks to the parameter dh_param

        :param dh_param: sent over the network by the person you're communicating with
        """
        self.secret_key = self.fast_exp(self.private_key, dh_param)
        return self.secret_key

